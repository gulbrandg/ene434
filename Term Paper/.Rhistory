# NO5
NO5 <- create_data("NO5")
fit_NO5 <- create_fit_test(NO5, SEP_DATE, "fit")
test_NO5 <- create_fit_test(NO5, SEP_DATE, "test")
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res + pri + pdq(1,0,0)))
glance(models) %>% arrange(AICc)
models %>%
select(mod1) %>%
report()
f <- models %>%
forecast(., new_data = test_NO5)
f %>% autoplot(NO5)
f <- models %>%
forecast(., new_data = test_NO5)
f %>% autoplot(test_NO5)
glance(models) %>% arrange(AICc)
models %>%
select(mod1) %>%
report()
# Seasonality
fit_NO5 <- mstl() %>%
autoplot()
# Seasonality
fit_NO5 <- stl() %>%
autoplot()
# Seasonality
fit_NO5 <- STL() %>%
autoplot()
library(tidyverse)
library(zoo)
library(lubridate)
library(janitor)
library(hablar)
library(tsibble)
library(fpp3)
library(tseries)
library(dynlm)
# Seasonality
fit_NO5 <- mstl() %>%
autoplot()
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res + pri + fourier(K=1) + pdq(1,0,0)))
glance(models) %>% arrange(AICc)
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res + pri + fourier(K=5) + pdq(1,0,0)))
glance(models) %>% arrange(AICc)
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res + pri + fourier(K=2) + pdq(1,0,0)))
models %>%
select(mod1) %>%
report()
f <- models %>%
forecast(., new_data = test_NO5)
f %>% autoplot(test_NO5)
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res + pri + fourier(K=2) + pdq(1,0,0) + PDQ(0,0,0)))
glance(models) %>% arrange(AICc)
models %>%
select(mod1) %>%
report()
f <- models %>%
forecast(., new_data = test_NO5)
f %>% autoplot(test_NO5)
f <- models %>%
forecast(., new_data = test_NO5)
f %>% autoplot(fit_NO5)
create_data <- function(area) {
df <-
gen_level[,c("date", area)] %>%
inner_join(., price_level[,c("date", area)], by = "date") %>%
mutate(yw = yearweek(date)) %>%
inner_join(., res_level[,c("yw", area)], by = "yw") %>%
select(-yw) %>%
as_tsibble(index = date)
colnames(df) <- c("date", "gen", "pri", "res")
return(df)
}
create_fit_test <- function(df, sep, fit_test) {
if (fit_test == "fit") {
df %>%
filter(date < as.Date(sep, "%d-%m-%Y"))
} else {
df %>%
filter(date >= as.Date(sep, "%d-%m-%Y"))
}
}
SEP_DATE <- "01-01-2023"
# NO1
NO1 <- create_data("NO1")
fit_NO1 <- create_fit_test(NO1, SEP_DATE, "fit")
test_NO1 <- create_fit_test(NO1, SEP_DATE, "test")
# NO2
NO2 <- create_data("NO2")
fit_NO2 <- create_fit_test(NO2, SEP_DATE, "fit")
test_NO2 <- create_fit_test(NO2, SEP_DATE, "test")
# NO5
NO5 <- create_data("NO5")
fit_NO5 <- create_fit_test(NO5, SEP_DATE, "fit")
test_NO5 <- create_fit_test(NO5, SEP_DATE, "test")
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res + pri + fourier(K=2) + pdq(1,0,0) + PDQ(0,0,0)))
glance(models) %>% arrange(AICc)
f <- models %>%
forecast(., new_data = test_NO5)
f %>% autoplot(fit_NO5)
NO1 %>%
ggplot() +
geom_line(aes(x = date, y = gen))
NO2 %>%
ggplot() +
geom_line(aes(x = date, y = gen))
NO5 %>%
ggplot() +
geom_line(aes(x = date, y = gen))
NO3 %>%
ggplot() +
geom_line(aes(x = date, y = gen))
NO2 %>%
ggplot() +
geom_line(aes(x = date, y = gen))
NO5 %>%
ggplot() +
geom_line(aes(x = date, y = gen))
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res + pri + fourier(K=2) + pdq(1,0,0) + PDQ(0,0,0)))
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res + pri + fourier(K=365) + pdq(1,0,0) + PDQ(0,0,0)))
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ fourier(K=2) + pdq(1,0,0) + PDQ(0,0,0)))
glance(models) %>% arrange(AICc)
models %>%
select(mod1) %>%
report()
f <- models %>%
forecast(., new_data = test_NO5)
f %>% autoplot(fit_NO5)
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ pdq(1,0,0) + PDQ(1,0,0)))
models %>%
select(mod1) %>%
report()
NO5 %>%
model(
STL(gen ~ season(period = "year") + season(period = "1 years"))
) %>%
components() %>%
autoplot()
NO5 %>%
model(
STL(gen ~ season(period = "year") + season(period = "1 ears"))
) %>%
components() %>%
autoplot()
NO5 %>%
model(
STL(gen ~ season(period = "year") + season(period = "1 year"))
) %>%
components() %>%
autoplot()
NO5 %>%
model(
STL(gen ~ season(period = "week") + season(period = "1 week"))
) %>%
components() %>%
autoplot()
NO5 %>%
model(
STL(gen ~ season(period = "year") + season(period = "1 year"))
) %>%
components() %>%
autoplot()
NO5 %>%
model(
STL(gen ~ season(period = "year"))
) %>%
components() %>%
autoplot()
NO5 %>%
model(
STL(gen ~ season(period = "year") + season(period = "week"))
) %>%
components() %>%
autoplot()
NO5 %>%
model(
STL(gen ~ season(period = "year") + season(period = "1 week"))
) %>%
components() %>%
autoplot()
NO5 %>%
model(
STL(gen ~ season(period = "year") + season(period = "1 week") + res)
) %>%
components() %>%
autoplot()
NO5 %>%
model(
ARIMA(gen ~ season(period = "year") + season(period = "1 week") + res)
) %>%
components() %>%
autoplot()
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res + pri))
glance(models) %>% arrange(AICc)
models %>%
select(mod1) %>%
report()
f <- models %>%
forecast(., new_data = test_NO5)
f %>% autoplot(fit_NO5)
f <- models %>%
forecast(., new_data = test_NO5)
f %>% autoplot(test_NO5)
f <- models %>%
forecast(., new_data = test_NO5)
f %>% autoplot(fit_NO5)
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res + pri + pdq(1,0,0) + PDQ(1,0,0)))
glance(models) %>% arrange(AICc)
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res + pri + pdq(7,0,0) + PDQ(1,0,0)))
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res + pri + pdq(5,0,0) + PDQ(1,0,0)))
glance(models) %>% arrange(AICc)
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res + pri + pdq(5,1,0) + PDQ(1,0,0)))
glance(models) %>% arrange(AICc)
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res + pri + pdq(5,2,0) + PDQ(1,0,0)))
glance(models) %>% arrange(AICc)
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res + pri + pdq(5,0,1) + PDQ(1,0,0)))
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res + pri + pdq(5,0,0) + PDQ(3,0,0)))
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ 0 + res + pri + pdq(5,0,0) + PDQ(2,0,0)))
glance(models) %>% arrange(AICc)
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ 0 + res + pri + pdq(5,0,1) + PDQ(2,0,0)))
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ 0 + res + pri + pdq(5,0,0) + PDQ(2,0,0)))
glance(models) %>% arrange(AICc)
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ 0 + res + pri + pdq(5,0,0) + PDQ(1,0,0)))
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ 0 + res + pri + pdq(5,0,0) + PDQ(0,0,0)))
glance(models) %>% arrange(AICc)
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ 0 + res + pri))
glance(models) %>% arrange(AICc)
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ 0 + res + pri + lag(pri, 1) + lag(pri, 2) + lag(pri, 3)))
glance(models) %>% arrange(AICc)
f <- models %>%
forecast(., new_data = test_NO5)
f %>% autoplot(fit_NO5)
f <- models %>%
forecast(., new_data = test_NO5)
f %>% autoplot(test_NO5)
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res + pri))
models <- gg_tsresiduals()
models %>%  gg_tsresiduals()
models %>%
select(mod1) %>%
report()
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ 0 + res + pri))
models %>%
select(mod1) %>%
report()
models %>%  gg_tsresiduals()
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ 0 + res))
models %>%  gg_tsresiduals()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(zoo)
library(lubridate)
library(janitor)
library(hablar)
library(tsibble)
library(fpp3)
library(tseries)
# Generation
gather_generation <- function(area, year) {
read_csv(paste0("Generation/Generation_", year, "_", area, ".csv")) %>%
.[,c(2,15)] %>%
`colnames<-`(c("date", "hydro")) %>%
separate(date, sep="-", into=c("date", NULL)) %>%
mutate(date = as.Date(date, "%d.%m.%Y %H:%M"),
yw = yearweek(date)) %>%
mutate(hydro = as.double(hydro)) %>%
group_by(yw) %>%
summarize(hydro = sum(hydro, na.rm = TRUE))
}
gather_generation_area <- function(area) {
map2(rep(area, 10), c("2015":"2024"), gather_generation) %>%
bind_rows() %>%
group_by(yw) %>%
summarize(hydro = sum(hydro, na.rm = TRUE))
}
gen_level <- gather_generation_area("NO1") %>%
rename("NO1" = "hydro") %>%
mutate("NO2" = gather_generation_area("NO2")$hydro,
"NO5" = gather_generation_area("NO5")$hydro)
# Reservoir levels
gather_res_lev <- function(area) {
read_csv(paste0("Fyllingsgrad/Fyllingsgrad_", area, ".csv")) %>%
gather(key = "year", value = level, -Uke) %>%
drop_na() %>%
mutate(yw = yearweek(paste0(year, " W", Uke))) %>%
select(-Uke, -year) %>%
mutate(level = as.double(unlist(strsplit(level, "%"))) / 100) %>%
select(yw, level) %>%
arrange(yw)
}
res_level <- gather_res_lev("NO1") %>%
rename(NO1 = level) %>%
mutate(NO2 = gather_res_lev("NO2")$level,
NO5 = gather_res_lev("NO5")$level)
# Price
gather_price <- function(area, year) {
read_csv(paste0("Price/Price_", year, "_", area, ".csv")) %>%
.[,c(1,2)] %>%
`colnames<-`(c("date", "price")) %>%
separate(date, sep="-", into=c("date", NULL)) %>%
# Subtract one day from date
mutate(date = as.Date(date, "%d.%m.%Y %H:%M") - as.difftime(1, unit="days"),
yw = yearweek(date)) %>%
mutate(price = as.double(price)) %>%
group_by(yw) %>%
summarize(price = mean(price, na.rm = TRUE))
}
gather_price_area <- function(area) {
map2(rep(area, 10), c("2015":"2024"), gather_price) %>%
bind_rows() %>%
group_by(yw) %>%
summarize(price = sum(price, na.rm = TRUE))
}
price_level <- gather_price_area("NO1") %>%
rename("NO1" = "price") %>%
mutate("NO2" = gather_price_area("NO2")$price,
"NO5" = gather_price_area("NO5")$price)
create_data <- function(area) {
df <-
gen_level[,c("yw", area)] %>%
inner_join(., price_level[,c("yw", area)], by = "yw") %>%
inner_join(., res_level[,c("yw", area)], by = "yw") %>%
select(-yw) %>%
as_tsibble(index = date)
colnames(df) <- c("date", "gen", "pri", "res")
return(df)
}
create_fit_test <- function(df, sep, fit_test) {
if (fit_test == "fit") {
df %>%
filter(date < yearweek(as.Date(sep, "%d-%m-%Y")))
} else {
df %>%
filter(date >= yearweek(as.Date(sep, "%d-%m-%Y")))
}
}
SEP_DATE <- "01-01-2023"
# NO1
NO1 <- create_data("NO1")
View(gen_level)
View(price_level)
View(res_level)
create_data <- function(area) {
df <-
gen_level[,c("yw", area)] %>%
inner_join(., price_level[,c("yw", area)], by = "yw") %>%
inner_join(., res_level[,c("yw", area)], by = "yw") %>%
select(-yw) %>%
as_tsibble(index = yw)
colnames(df) <- c("date", "gen", "pri", "res")
return(df)
}
create_fit_test <- function(df, sep, fit_test) {
if (fit_test == "fit") {
df %>%
filter(date < yearweek(as.Date(sep, "%d-%m-%Y")))
} else {
df %>%
filter(date >= yearweek(as.Date(sep, "%d-%m-%Y")))
}
}
SEP_DATE <- "01-01-2023"
# NO1
NO1 <- create_data("NO1")
create_data <- function(area) {
df <-
gen_level[,c("yw", area)] %>%
inner_join(., price_level[,c("yw", area)], by = "yw") %>%
inner_join(., res_level[,c("yw", area)], by = "yw") %>%
as_tsibble(index = yw)
colnames(df) <- c("date", "gen", "pri", "res")
return(df)
}
create_fit_test <- function(df, sep, fit_test) {
if (fit_test == "fit") {
df %>%
filter(date < yearweek(as.Date(sep, "%d-%m-%Y")))
} else {
df %>%
filter(date >= yearweek(as.Date(sep, "%d-%m-%Y")))
}
}
SEP_DATE <- "01-01-2023"
# NO1
NO1 <- create_data("NO1")
fit_NO1 <- create_fit_test(NO1, SEP_DATE, "fit")
test_NO1 <- create_fit_test(NO1, SEP_DATE, "test")
# NO2
NO2 <- create_data("NO2")
fit_NO2 <- create_fit_test(NO2, SEP_DATE, "fit")
test_NO2 <- create_fit_test(NO2, SEP_DATE, "test")
# NO5
NO5 <- create_data("NO5")
fit_NO5 <- create_fit_test(NO5, SEP_DATE, "fit")
test_NO5 <- create_fit_test(NO5, SEP_DATE, "test")
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res + pri))
models %>%  gg_tsresiduals()
models %>%
select(mod1) %>%
report()
f <- models %>%
forecast(., new_data = test_NO5)
f %>% autoplot(test_NO5)
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res))
models <-
fit_NO5 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res))
models %>%  gg_tsresiduals()
models %>%
select(mod1) %>%
report()
f <- models %>%
forecast(., new_data = test_NO5)
f %>% autoplot(test_NO5)
f <- models %>%
forecast(., new_data = test_NO5)
f %>% autoplot(fit_NO5)
models <-
fit_NO2 %>%
fill_gaps() %>%
model(mod1 = ARIMA(gen ~ res + pri))
