"0","# Automate the process above in a function which takes the file path for datasets as an argument"
"0",""
"0","process_generation_data <- function(file_path) {"
"0","  # Load data and clean column names"
"0","  generation_data <- read_csv(file_path) %>% "
"0","    clean_names()"
"0","  "
"0","  # Clean time stamp data"
"0","  generation_data <- generation_data %>%"
"0","    separate(mtu, sep=""-"", into=c(""period"", ""end"")) %>%"
"0","    mutate(end = str_remove(end, ""\\s*\\(CET/CEST\\)""))"
"0","  "
"0","  # Format time stamp data"
"0","  generation_data <- generation_data %>%"
"0","    mutate(period = as.POSIXct(period, format=""%d.%m.%Y %H:%M"", tz = ""CET""),"
"0","           end = as.POSIXct(end, format=""%d.%m.%Y %H:%M"", tz = ""CET""),"
"0","           year = year(period),"
"0","           month = month(period)) %>%"
"0","    filter(!is.na(period))"
"0","  "
"0","  # Remove duplicates, preferentially keep rows with more complete data"
"0","  generation_data <- generation_data %>%"
"0","    arrange(desc(is.na(hydro_water_reservoir_actual_aggregated_mw))) %>%  # Prioritize by less NAs in a key column if desired"
"0","    group_by(period) %>%"
"0","    filter(row_number() == 1) %>%  # Keep the first occurrence"
"0","    ungroup()"
"0","  "
"0","  # Create a sequence of complete dates for the given year"
"0","  year_used <- unique(year(generation_data$period))"
"0","  start_date <- as.POSIXct(paste(year_used, ""-01-01 00:00"", sep=""""), tz = ""CET"")"
"0","  end_date <- as.POSIXct(paste(year_used, ""-12-31 23:00"", sep=""""), tz = ""CET"")"
"0","  "
"0","  complete_dates <- data_frame("
"0","    period = seq(from = start_date, to = end_date, by = ""hour"")"
"0","  )"
"0","  "
"0","  # Merge to find missing dates and fill missing values by carrying forward"
"0","  generation_data <- complete_dates %>%"
"0","    left_join(generation_data, by = ""period"") %>%"
"0","    fill(names(generation_data), .direction = ""down"")"
"0","  "
"0","  # Check for missing values"
"0","  still_missing <- sum(is.na(generation_data))"
"0","  print(paste(""Still missing after fill:"", still_missing))"
"0","  "
"0","  # Create a variable name based on the year"
"0","  variable_name <- paste(""NO1_gen_type_"", year_used, sep="""")"
"0","  assign(variable_name, generation_data, envir = .GlobalEnv)"
"0","  "
"0","  return(generation_data)"
"0","}"
"0",""
